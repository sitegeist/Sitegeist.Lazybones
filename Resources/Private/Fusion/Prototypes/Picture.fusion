prototype(Sitegeist.Lazybones:Picture) < prototype(Neos.Fusion:Component) {
    @styleguide {
        props {
            imageSource = Sitegeist.Kaleidoscope:DummyImageSource
            sources = Neos.Fusion:RawArray {
                1 = Neos.Fusion:RawArray {
                    srcset = '1x, 1.5x, 2x'
                    media = 'screen and (min-width: 1600px)'
                }
                2 = Neos.Fusion:RawArray {
                    srcset = '320w, 480w, 800w, 1000w'
                    sizes = '(max-width: 320px) 280px, (max-width: 480px) 440px, 800px'
                    media = 'screen and (max-width: 1599px)'
                }
                3 = Neos.Fusion:RawArray {
                    imageSource = Sitegeist.Kaleidoscope:DummyImageSource {
                        text = "im am here for printing"
                    }
                    media = 'print'
                }
            }
            alt = 'Elva dressed as a fairy'
        }
    }

    lazy = Sitegeist.Lazybones:Lazy.Enabled
    lazyClass = Sitegeist.Lazybones:Lazy.ClassName
    lazyWidth = Sitegeist.Lazybones:Lazy.Width

    imageSource = null
    srcset = null
    sizes = null
    sources = null
    formats = null
    width = null
    height = null
    alt = ''
    title = null
    class = null
    content = ''
    renderDimensionAttributes = null

    #
    # put the values that shall be applied to sources automatically to the context
    # to make them available to all props during evaluation
    #
    @context {
        __imageSource = ${this.imageSource}
        __srcset = ${this.srcset}
        __sizes = ${this.sizes}
        __width = ${this.width}
        __height = ${this.height}
    }

    renderer = Neos.Fusion:Case {

        lazy {
            condition = ${props.lazy}
            renderer = Neos.Fusion:Component {
                @if.hasImageSource = ${props.imageSource && Type.instance(props.imageSource, '\\Sitegeist\\Kaleidoscope\\EelHelpers\\ImageSourceHelperInterface')}

                # apply format, width and height to the imageSource
                imageSource = ${props.imageSource}
                imageSource.@process.applyWidth = ${props.width ? value.setWidth(props.width) : value}
                imageSource.@process.applyHeight = ${props.height ? value.setHeight(props.height) : value}
                imageSource.@process.applyFormat = ${props.format ? value.setFormat(props.format) : value}

                srcset = ${props.srcset}
                sizes = ${props.sizes}
                sources = ${props.sources}
                formats = ${props.formats}
                width = ${props.width}
                height = ${props.height}
                alt = ${props.alt}
                title = ${props.title}
                class = ${props.class}
                content = ${props.content}
                renderDimensionAttributes = ${Type.isBoolean(props.renderDimensionAttributes) ? props.renderDimensionAttributes : (!props.content && !props.sources)}

                lazyClass = ${props.lazyClass}
                lazyWidth = ${props.lazyWidth}

                renderer = afx`
                    <picture class={props.class ? props.class + ' ' + props.lazyClass : props.lazyClass }>
                        {props.content}
                        <Neos.Fusion:Collection collection={props.sources} itemName="source" @if.has={props.sources}>
                            <Sitegeist.Lazybones:Source
                                lazy
                                imageSource={source.imageSource ? source.imageSource : props.imageSource}
                                type={source.type}
                                media={source.media}
                                format={source.format}
                                width={source.width}
                                height={source.height}
                                srcset={source.srcset ? source.srcset : props.srcset}
                                sizes={source.sizes ? source.sizes : props.sizes}
                            />
                        </Neos.Fusion:Collection>
                        <Neos.Fusion:Collection
                            @if.has={props.imageSource && props.formats}
                            collection={Type.isArray(props.formats) ? props.formats : String.split(props.formats, ',')}
                            itemName="format"
                        >
                            <Sitegeist.Lazybones:Source format={String.trim(format)} />
                        </Neos.Fusion:Collection>
                        <Sitegeist.Lazybones:Image
                            lazy
                            lazyClass={props.lazyClass}
                            lazyWidth={props.lazyWidth}

                            imageSource={props.imageSource}
                            sizes={props.sizes}
                            srcset={props.srcset}
                            alt={props.alt}
                            title={props.title}

                            renderDimensionAttributes={props.renderDimensionAttributes}
                        />
                    </picture>
                `
            }
        }
        default {
            condition = true
            renderer = afx`
                <Sitegeist.Kaleidoscope:Picture {...props} >{props.content}</Sitegeist.Kaleidoscope:Picture>
            `
        }
    }
}
